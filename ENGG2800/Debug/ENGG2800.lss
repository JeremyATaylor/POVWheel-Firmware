
ENGG2800.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000188  0000021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000188  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800124  00800124  00000240  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000240  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000184  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000f6  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000116  00000000  00000000  00000522  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00000638  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000176  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010c  00000000  00000000  00000826  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00000932  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e8       	ldi	r30, 0x88	; 136
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e2       	ldi	r26, 0x24	; 36
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 32       	cpi	r26, 0x25	; 37
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bc 00 	call	0x178	; 0x178 <main>
  9e:	0c 94 c2 00 	jmp	0x184	; 0x184 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
	0b11111111,
};

void setup(void) {
	
	GSCLK_DDR |= (1 << GSCLK_PIN);		// Grayscale PWM reference clock
  a6:	20 9a       	sbi	0x04, 0	; 4
	SCLK_DDR |= (1 << SCLK_PIN);		// Serial data shift clock
  a8:	25 9a       	sbi	0x04, 5	; 4
	DCPRG_DDR |= (1 << DCPRG_PIN);		// Dot correction programming
  aa:	54 9a       	sbi	0x0a, 4	; 10
	VPRG_DDR |= (1 << VPRG_PIN);		// Mode selection
  ac:	57 9a       	sbi	0x0a, 7	; 10
	XLAT_DDR |= (1 << XLAT_PIN);		// Latch signal
  ae:	21 9a       	sbi	0x04, 1	; 4
	BLANK_DDR |= (1 << BLANK_PIN);		// Blank all outputs 
  b0:	22 9a       	sbi	0x04, 2	; 4
	SIN_DDR |= (1 << SIN_PIN);			// Serial data output > input
  b2:	23 9a       	sbi	0x04, 3	; 4
	
	GSCLK_PORT &= ~(1 << GSCLK_PIN);	// Set grayscale clock pin low
  b4:	28 98       	cbi	0x05, 0	; 5
	SCLK_PORT &= ~(1 << SCLK_PIN);		// Set serial data shift clock pin low
  b6:	2d 98       	cbi	0x05, 5	; 5
	DCPRG_PORT &= ~(1 << DCPRG_PIN);	// Set dot correction programming pin low
  b8:	5c 98       	cbi	0x0b, 4	; 11
	VPRG_PORT |= (1 << VPRG_PIN);		// Set mode selection pin high
  ba:	5f 9a       	sbi	0x0b, 7	; 11
	XLAT_PORT &= ~(1 << XLAT_PIN);		// Set latch signal pin low
  bc:	29 98       	cbi	0x05, 1	; 5
	BLANK_PORT |= (1 << BLANK_PIN);		// Set blank output pin high
  be:	2a 9a       	sbi	0x05, 2	; 5

	SPCR = (1 << SPE)|(1 << MSTR);		// Enable SPI and Master
  c0:	80 e5       	ldi	r24, 0x50	; 80
  c2:	8c bd       	out	0x2c, r24	; 44
	SPSR = (1 << SPI2X);				// Set clock rate fck/2
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	8d bd       	out	0x2d, r24	; 45
	TCCR0A = (1 << WGM01);				// Set timer mode to CTC
  c8:	82 e0       	ldi	r24, 0x02	; 2
  ca:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << CS02)|(1 << CS00);	// Set prescaler to 1024 and start timer
  cc:	85 e0       	ldi	r24, 0x05	; 5
  ce:	85 bd       	out	0x25, r24	; 37

	// OCRn = [ (Clock speed / Prescale value) * (Desired time in seconds) ] - 1
	OCR0A = 3;							// Interrupt every 4096 clock cycles
  d0:	83 e0       	ldi	r24, 0x03	; 3
  d2:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1 << OCIE0A);			// Enable Timer0 Match A interrupt
  d4:	ee e6       	ldi	r30, 0x6E	; 110
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	80 83       	st	Z, r24
  de:	08 95       	ret

000000e0 <TLC5940_ClockInDC>:
}

void TLC5940_ClockInDC(void) {
	DCPRG_PORT |= (1 << DCPRG_PIN);		// Set dot correction pin high
  e0:	5c 9a       	sbi	0x0b, 4	; 11
	VPRG_PORT |= (1 << VPRG_PIN);		// Set mode selection pin high
  e2:	5f 9a       	sbi	0x0b, 7	; 11
  e4:	e8 e1       	ldi	r30, 0x18	; 24
  e6:	f1 e0       	ldi	r31, 0x01	; 1
  e8:	84 e2       	ldi	r24, 0x24	; 36
  ea:	91 e0       	ldi	r25, 0x01	; 1
	
	for (dcData_t i = 0; i < dcDataSize; i++) {
		SPDR = dcData[i];				// Start transmission
  ec:	21 91       	ld	r18, Z+
  ee:	2e bd       	out	0x2e, r18	; 46
		while (!(SPSR & (1 << SPIF)));	// Wait for transmission complete
  f0:	0d b4       	in	r0, 0x2d	; 45
  f2:	07 fe       	sbrs	r0, 7
  f4:	fd cf       	rjmp	.-6      	; 0xf0 <TLC5940_ClockInDC+0x10>

void TLC5940_ClockInDC(void) {
	DCPRG_PORT |= (1 << DCPRG_PIN);		// Set dot correction pin high
	VPRG_PORT |= (1 << VPRG_PIN);		// Set mode selection pin high
	
	for (dcData_t i = 0; i < dcDataSize; i++) {
  f6:	e8 17       	cp	r30, r24
  f8:	f9 07       	cpc	r31, r25
  fa:	c1 f7       	brne	.-16     	; 0xec <TLC5940_ClockInDC+0xc>
		SPDR = dcData[i];				// Start transmission
		while (!(SPSR & (1 << SPIF)));	// Wait for transmission complete
	}
	XLAT_PORT |= (1 << XLAT_PIN);
  fc:	29 9a       	sbi	0x05, 1	; 5
	XLAT_PORT &= ~(1 << XLAT_PIN);
  fe:	29 98       	cbi	0x05, 1	; 5
 100:	08 95       	ret

00000102 <__vector_14>:
}

ISR(TIMER0_COMPA_vect) {
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	2f 93       	push	r18
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
 112:	ef 93       	push	r30
 114:	ff 93       	push	r31
	static uint8_t latchNeedsPulse = 0;
	
	BLANK_PORT |= (1 << BLANK_PIN);			// Set blank output pin high
 116:	2a 9a       	sbi	0x05, 2	; 5
	
	if (VPRG_PORT & (1 << VPRG_PIN)) {
 118:	5f 9b       	sbis	0x0b, 7	; 11
 11a:	0c c0       	rjmp	.+24     	; 0x134 <__vector_14+0x32>
		VPRG_PORT &= ~(1 << VPRG_PIN);		// Set mode selection pin low
 11c:	5f 98       	cbi	0x0b, 7	; 11
		
		if (latchNeedsPulse) {
 11e:	80 91 24 01 	lds	r24, 0x0124
 122:	88 23       	and	r24, r24
 124:	21 f0       	breq	.+8      	; 0x12e <__vector_14+0x2c>
			XLAT_PORT |= (1 << XLAT_PIN);	// Pulse latch signal pin
 126:	29 9a       	sbi	0x05, 1	; 5
			XLAT_PORT &= ~(1 << XLAT_PIN);
 128:	29 98       	cbi	0x05, 1	; 5
			latchNeedsPulse = 0;
 12a:	10 92 24 01 	sts	0x0124, r1
		}
		
		SCLK_PORT |= (1 << SCLK_PIN);		// Pulse serial data clock pin
 12e:	2d 9a       	sbi	0x05, 5	; 5
		SCLK_PORT &= ~(1 << SCLK_PIN);
 130:	2d 98       	cbi	0x05, 5	; 5
 132:	08 c0       	rjmp	.+16     	; 0x144 <__vector_14+0x42>
		
		} else if (latchNeedsPulse) {
 134:	80 91 24 01 	lds	r24, 0x0124
 138:	88 23       	and	r24, r24
 13a:	21 f0       	breq	.+8      	; 0x144 <__vector_14+0x42>
		XLAT_PORT |= (1 << XLAT_PIN);		// Pulse latch signal pin
 13c:	29 9a       	sbi	0x05, 1	; 5
		XLAT_PORT &= ~(1 << XLAT_PIN);
 13e:	29 98       	cbi	0x05, 1	; 5
		latchNeedsPulse = 0;
 140:	10 92 24 01 	sts	0x0124, r1
	}
	
	BLANK_PORT &= ~(1 << BLANK_PIN);		// Set blank output pin low
 144:	2a 98       	cbi	0x05, 2	; 5
 146:	e0 e0       	ldi	r30, 0x00	; 0
 148:	f1 e0       	ldi	r31, 0x01	; 1
 14a:	88 e1       	ldi	r24, 0x18	; 24
 14c:	91 e0       	ldi	r25, 0x01	; 1
	
	// Below this we have 4096 cycles to shift in the data for the next cycle
	for (gsData_t i = 0; i < gsDataSize; i++) {
		SPDR = gsData[i];
 14e:	21 91       	ld	r18, Z+
 150:	2e bd       	out	0x2e, r18	; 46
		while (!(SPSR & (1 << SPIF)));
 152:	0d b4       	in	r0, 0x2d	; 45
 154:	07 fe       	sbrs	r0, 7
 156:	fd cf       	rjmp	.-6      	; 0x152 <__vector_14+0x50>
	}
	
	BLANK_PORT &= ~(1 << BLANK_PIN);		// Set blank output pin low
	
	// Below this we have 4096 cycles to shift in the data for the next cycle
	for (gsData_t i = 0; i < gsDataSize; i++) {
 158:	e8 17       	cp	r30, r24
 15a:	f9 07       	cpc	r31, r25
 15c:	c1 f7       	brne	.-16     	; 0x14e <__vector_14+0x4c>
		SPDR = gsData[i];
		while (!(SPSR & (1 << SPIF)));
	}
	latchNeedsPulse = 1;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 93 24 01 	sts	0x0124, r24
}
 164:	ff 91       	pop	r31
 166:	ef 91       	pop	r30
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	2f 91       	pop	r18
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <main>:

int main(void) {
	setup();
 178:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	TLC5940_ClockInDC();
 17c:	0e 94 70 00 	call	0xe0	; 0xe0 <TLC5940_ClockInDC>
	
	sei();		// Enable interrupts
 180:	78 94       	sei
 182:	ff cf       	rjmp	.-2      	; 0x182 <main+0xa>

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
